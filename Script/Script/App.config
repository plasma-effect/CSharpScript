<?xml version="1.0" encoding="utf-8"?>
<configuration>
    <configSections>
        <sectionGroup name="userSettings" type="System.Configuration.UserSettingsGroup, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" >
            <section name="Script.Properties.Settings" type="System.Configuration.ClientSettingsSection, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" allowExeDefinition="MachineToLocalUser" requirePermission="false" />
        </sectionGroup>
    </configSections>
    <startup> 
        <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.7.2" />
    </startup>
  <runtime>
    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
      <dependentAssembly>
        <assemblyIdentity name="System.Memory" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-4.0.1.1" newVersion="4.0.1.1" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Numerics.Vectors" publicKeyToken="b03f5f7f11d50a3a" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-4.1.4.0" newVersion="4.1.4.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Buffers" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-4.0.3.0" newVersion="4.0.3.0" />
      </dependentAssembly>
    </assemblyBinding>
  </runtime>
  <userSettings>
    <Script.Properties.Settings>
      <setting name="DefautCode" serializeAs="String">
        <value>using System;
using System.Collections.Generic;
using System.Text;</value>
      </setting>
      <setting name="PredefinedFunctions" serializeAs="String">
        <value>void Write(object obj)
    output [obj] to standard output

void WriteLine()
    begin on a new line

void WriteLine(string str)
    output [str] to standard output and begin on a new line

void WriteLine(object obj)
    output [obj] to standard output and begin on a new line

void WriteLine&lt;T&gt;(IEnumerable&lt;T&gt; ts)
    output [ts] in a row to standard output and begin on a new line

void Message(string str)
    output [str] to message box

string ReadLine()
    read one line from standard input

string ReadAll()
    read all text from standard input

T[] ReadArray&lt;T&gt;(Func&lt;string,T&gt; parser)
    read one line and split by space, then transform by [parser]

IEnumerable&lt;int&gt; Range(int min, int max, int step = 1)
    return enumerable that is similar to boost::irange(min, max, step)

IEnumerable&lt;long&gt; Range(long min, long max, long step = 1)
    return enumerable that is similar to boost::irange(min, max, step)

IEnumerable&lt;int&gt; Range(int max)
    return enumerable that is similar to boost::irange(max)

IEnumerable&lt;long&gt; Range(long max)
    return enumerable than is similar to boost::irange(max)</value>
      </setting>
    </Script.Properties.Settings>
  </userSettings>
</configuration>